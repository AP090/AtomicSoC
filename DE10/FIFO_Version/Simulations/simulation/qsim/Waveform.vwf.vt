// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/05/2018 13:59:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Sim1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Sim1_vlg_sample_tst(
	data,
	newWordHPS,
	OKIn,
	refclk,
	reset,
	sampler_tx
);
input [19:0] data;
input  newWordHPS;
input  OKIn;
input  refclk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(data or newWordHPS or OKIn or refclk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Sim1_vlg_check_tst (
	CLR,
	DATA_OUT,
	LDAC,
	RESET6,
	SCKOUT,
	SYNC,
	wrfull,
	wrusedw,
	WSDBusy,
	sampler_rx
);
input  CLR;
input  DATA_OUT;
input  LDAC;
input  RESET6;
input  SCKOUT;
input  SYNC;
input  wrfull;
input [2:0] wrusedw;
input  WSDBusy;
input sampler_rx;

reg  CLR_expected;
reg  DATA_OUT_expected;
reg  LDAC_expected;
reg  RESET6_expected;
reg  SCKOUT_expected;
reg  SYNC_expected;
reg  wrfull_expected;
reg [2:0] wrusedw_expected;
reg  WSDBusy_expected;

reg  CLR_prev;
reg  DATA_OUT_prev;
reg  LDAC_prev;
reg  RESET6_prev;
reg  SCKOUT_prev;
reg  SYNC_prev;
reg  wrfull_prev;
reg [2:0] wrusedw_prev;
reg  WSDBusy_prev;

reg  CLR_expected_prev;
reg  DATA_OUT_expected_prev;
reg  LDAC_expected_prev;
reg  RESET6_expected_prev;
reg  SCKOUT_expected_prev;
reg  SYNC_expected_prev;
reg  wrfull_expected_prev;
reg [2:0] wrusedw_expected_prev;
reg  WSDBusy_expected_prev;

reg  last_CLR_exp;
reg  last_DATA_OUT_exp;
reg  last_LDAC_exp;
reg  last_RESET6_exp;
reg  last_SCKOUT_exp;
reg  last_SYNC_exp;
reg  last_wrfull_exp;
reg [2:0] last_wrusedw_exp;
reg  last_WSDBusy_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	CLR_prev = CLR;
	DATA_OUT_prev = DATA_OUT;
	LDAC_prev = LDAC;
	RESET6_prev = RESET6;
	SCKOUT_prev = SCKOUT;
	SYNC_prev = SYNC;
	wrfull_prev = wrfull;
	wrusedw_prev = wrusedw;
	WSDBusy_prev = WSDBusy;
end

// update expected /o prevs

always @(trigger)
begin
	CLR_expected_prev = CLR_expected;
	DATA_OUT_expected_prev = DATA_OUT_expected;
	LDAC_expected_prev = LDAC_expected;
	RESET6_expected_prev = RESET6_expected;
	SCKOUT_expected_prev = SCKOUT_expected;
	SYNC_expected_prev = SYNC_expected;
	wrfull_expected_prev = wrfull_expected;
	wrusedw_expected_prev = wrusedw_expected;
	WSDBusy_expected_prev = WSDBusy_expected;
end



// expected CLR
initial
begin
	CLR_expected = 1'bX;
end 

// expected DATA_OUT
initial
begin
	DATA_OUT_expected = 1'bX;
end 

// expected LDAC
initial
begin
	LDAC_expected = 1'bX;
end 

// expected RESET6
initial
begin
	RESET6_expected = 1'bX;
end 

// expected SCKOUT
initial
begin
	SCKOUT_expected = 1'bX;
end 

// expected SYNC
initial
begin
	SYNC_expected = 1'bX;
end 

// expected wrfull
initial
begin
	wrfull_expected = 1'bX;
end 

// expected WSDBusy
initial
begin
	WSDBusy_expected = 1'bX;
end 
// expected wrusedw[ 2 ]
initial
begin
	wrusedw_expected[2] = 1'bX;
end 
// expected wrusedw[ 1 ]
initial
begin
	wrusedw_expected[1] = 1'bX;
end 
// expected wrusedw[ 0 ]
initial
begin
	wrusedw_expected[0] = 1'bX;
end 
// generate trigger
always @(CLR_expected or CLR or DATA_OUT_expected or DATA_OUT or LDAC_expected or LDAC or RESET6_expected or RESET6 or SCKOUT_expected or SCKOUT or SYNC_expected or SYNC or wrfull_expected or wrfull or wrusedw_expected or wrusedw or WSDBusy_expected or WSDBusy)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CLR = %b | expected DATA_OUT = %b | expected LDAC = %b | expected RESET6 = %b | expected SCKOUT = %b | expected SYNC = %b | expected wrfull = %b | expected wrusedw = %b | expected WSDBusy = %b | ",CLR_expected_prev,DATA_OUT_expected_prev,LDAC_expected_prev,RESET6_expected_prev,SCKOUT_expected_prev,SYNC_expected_prev,wrfull_expected_prev,wrusedw_expected_prev,WSDBusy_expected_prev);
	$display("| real CLR = %b | real DATA_OUT = %b | real LDAC = %b | real RESET6 = %b | real SCKOUT = %b | real SYNC = %b | real wrfull = %b | real wrusedw = %b | real WSDBusy = %b | ",CLR_prev,DATA_OUT_prev,LDAC_prev,RESET6_prev,SCKOUT_prev,SYNC_prev,wrfull_prev,wrusedw_prev,WSDBusy_prev);
`endif
	if (
		( CLR_expected_prev !== 1'bx ) && ( CLR_prev !== CLR_expected_prev )
		&& ((CLR_expected_prev !== last_CLR_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLR_expected_prev);
		$display ("     Real value = %b", CLR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CLR_exp = CLR_expected_prev;
	end
	if (
		( DATA_OUT_expected_prev !== 1'bx ) && ( DATA_OUT_prev !== DATA_OUT_expected_prev )
		&& ((DATA_OUT_expected_prev !== last_DATA_OUT_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_OUT_exp = DATA_OUT_expected_prev;
	end
	if (
		( LDAC_expected_prev !== 1'bx ) && ( LDAC_prev !== LDAC_expected_prev )
		&& ((LDAC_expected_prev !== last_LDAC_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDAC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDAC_expected_prev);
		$display ("     Real value = %b", LDAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LDAC_exp = LDAC_expected_prev;
	end
	if (
		( RESET6_expected_prev !== 1'bx ) && ( RESET6_prev !== RESET6_expected_prev )
		&& ((RESET6_expected_prev !== last_RESET6_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESET6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESET6_expected_prev);
		$display ("     Real value = %b", RESET6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RESET6_exp = RESET6_expected_prev;
	end
	if (
		( SCKOUT_expected_prev !== 1'bx ) && ( SCKOUT_prev !== SCKOUT_expected_prev )
		&& ((SCKOUT_expected_prev !== last_SCKOUT_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCKOUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCKOUT_expected_prev);
		$display ("     Real value = %b", SCKOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SCKOUT_exp = SCKOUT_expected_prev;
	end
	if (
		( SYNC_expected_prev !== 1'bx ) && ( SYNC_prev !== SYNC_expected_prev )
		&& ((SYNC_expected_prev !== last_SYNC_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SYNC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SYNC_expected_prev);
		$display ("     Real value = %b", SYNC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SYNC_exp = SYNC_expected_prev;
	end
	if (
		( wrfull_expected_prev !== 1'bx ) && ( wrfull_prev !== wrfull_expected_prev )
		&& ((wrfull_expected_prev !== last_wrfull_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wrfull :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wrfull_expected_prev);
		$display ("     Real value = %b", wrfull_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_wrfull_exp = wrfull_expected_prev;
	end
	if (
		( wrusedw_expected_prev[0] !== 1'bx ) && ( wrusedw_prev[0] !== wrusedw_expected_prev[0] )
		&& ((wrusedw_expected_prev[0] !== last_wrusedw_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wrusedw[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wrusedw_expected_prev);
		$display ("     Real value = %b", wrusedw_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_wrusedw_exp[0] = wrusedw_expected_prev[0];
	end
	if (
		( wrusedw_expected_prev[1] !== 1'bx ) && ( wrusedw_prev[1] !== wrusedw_expected_prev[1] )
		&& ((wrusedw_expected_prev[1] !== last_wrusedw_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wrusedw[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wrusedw_expected_prev);
		$display ("     Real value = %b", wrusedw_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_wrusedw_exp[1] = wrusedw_expected_prev[1];
	end
	if (
		( wrusedw_expected_prev[2] !== 1'bx ) && ( wrusedw_prev[2] !== wrusedw_expected_prev[2] )
		&& ((wrusedw_expected_prev[2] !== last_wrusedw_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wrusedw[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wrusedw_expected_prev);
		$display ("     Real value = %b", wrusedw_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_wrusedw_exp[2] = wrusedw_expected_prev[2];
	end
	if (
		( WSDBusy_expected_prev !== 1'bx ) && ( WSDBusy_prev !== WSDBusy_expected_prev )
		&& ((WSDBusy_expected_prev !== last_WSDBusy_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WSDBusy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WSDBusy_expected_prev);
		$display ("     Real value = %b", WSDBusy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_WSDBusy_exp = WSDBusy_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Sim1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [19:0] data;
reg newWordHPS;
reg OKIn;
reg refclk;
reg reset;
// wires                                               
wire CLR;
wire DATA_OUT;
wire LDAC;
wire RESET6;
wire SCKOUT;
wire SYNC;
wire wrfull;
wire [2:0] wrusedw;
wire WSDBusy;

wire sampler;                             

// assign statements (if any)                          
Sim1 i1 (
// port map - connection between master ports and signals/registers   
	.CLR(CLR),
	.data(data),
	.DATA_OUT(DATA_OUT),
	.LDAC(LDAC),
	.newWordHPS(newWordHPS),
	.OKIn(OKIn),
	.refclk(refclk),
	.reset(reset),
	.RESET6(RESET6),
	.SCKOUT(SCKOUT),
	.SYNC(SYNC),
	.wrfull(wrfull),
	.wrusedw(wrusedw),
	.WSDBusy(WSDBusy)
);
// data[ 19 ]
initial
begin
	data[19] = 1'b0;
end 
// data[ 18 ]
initial
begin
	data[18] = 1'b0;
end 
// data[ 17 ]
initial
begin
	data[17] = 1'b1;
end 
// data[ 16 ]
initial
begin
	data[16] = 1'b1;
end 
// data[ 15 ]
initial
begin
	data[15] = 1'b0;
end 
// data[ 14 ]
initial
begin
	data[14] = 1'b0;
end 
// data[ 13 ]
initial
begin
	data[13] = 1'b0;
end 
// data[ 12 ]
initial
begin
	data[12] = 1'b0;
end 
// data[ 11 ]
initial
begin
	data[11] = 1'b1;
end 
// data[ 10 ]
initial
begin
	data[10] = 1'b1;
end 
// data[ 9 ]
initial
begin
	data[9] = 1'b0;
end 
// data[ 8 ]
initial
begin
	data[8] = 1'b1;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b1;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 

// newWordHPS
initial
begin
	newWordHPS = 1'b0;
	newWordHPS = #12000000 1'b1;
	newWordHPS = #60000 1'b0;
	newWordHPS = #1020000 1'b1;
	newWordHPS = #160000 1'b0;
	newWordHPS = #820000 1'b1;
	newWordHPS = #240000 1'b0;
	newWordHPS = #740000 1'b1;
	newWordHPS = #160000 1'b0;
	newWordHPS = #1400000 1'b1;
	newWordHPS = #180000 1'b0;
	newWordHPS = #1220000 1'b1;
	newWordHPS = #160000 1'b0;
end 

// OKIn
initial
begin
	OKIn = 1'b0;
	OKIn = #16000000 1'b1;
	OKIn = #1180000 1'b0;
	OKIn = #420000 1'b1;
	OKIn = #560000 1'b0;
	OKIn = #880000 1'b1;
	OKIn = #400000 1'b0;
	OKIn = #1180000 1'b1;
	OKIn = #600000 1'b0;
	OKIn = #1180000 1'b1;
	OKIn = #520000 1'b0;
	OKIn = #1160000 1'b1;
	OKIn = #800000 1'b0;
	OKIn = #1360000 1'b1;
	OKIn = #880000 1'b0;
	OKIn = #2040000 1'b1;
	OKIn = #1120000 1'b0;
	OKIn = #1920000 1'b1;
	OKIn = #1320000 1'b0;
end 

// refclk
always
begin
	refclk = 1'b0;
	refclk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #120000 1'b1;
	reset = #820000 1'b0;
end 

Sim1_vlg_sample_tst tb_sample (
	.data(data),
	.newWordHPS(newWordHPS),
	.OKIn(OKIn),
	.refclk(refclk),
	.reset(reset),
	.sampler_tx(sampler)
);

Sim1_vlg_check_tst tb_out(
	.CLR(CLR),
	.DATA_OUT(DATA_OUT),
	.LDAC(LDAC),
	.RESET6(RESET6),
	.SCKOUT(SCKOUT),
	.SYNC(SYNC),
	.wrfull(wrfull),
	.wrusedw(wrusedw),
	.WSDBusy(WSDBusy),
	.sampler_rx(sampler)
);
endmodule

